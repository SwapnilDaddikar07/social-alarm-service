// Code generated by MockGen. DO NOT EDIT.
// Source: repository/alarm_media_repository.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	db_model "social-alarm-service/db_model"
	transaction_manager "social-alarm-service/repository/transaction_manager"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAlarmMediaRepository is a mock of AlarmMediaRepository interface.
type MockAlarmMediaRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlarmMediaRepositoryMockRecorder
}

// MockAlarmMediaRepositoryMockRecorder is the mock recorder for MockAlarmMediaRepository.
type MockAlarmMediaRepositoryMockRecorder struct {
	mock *MockAlarmMediaRepository
}

// NewMockAlarmMediaRepository creates a new mock instance.
func NewMockAlarmMediaRepository(ctrl *gomock.Controller) *MockAlarmMediaRepository {
	mock := &MockAlarmMediaRepository{ctrl: ctrl}
	mock.recorder = &MockAlarmMediaRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAlarmMediaRepository) EXPECT() *MockAlarmMediaRepositoryMockRecorder {
	return m.recorder
}

// GetMediaForAlarm mocks base method.
func (m *MockAlarmMediaRepository) GetMediaForAlarm(ctx *gin.Context, alarmId string) ([]db_model.GetMediaForAlarm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMediaForAlarm", ctx, alarmId)
	ret0, _ := ret[0].([]db_model.GetMediaForAlarm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMediaForAlarm indicates an expected call of GetMediaForAlarm.
func (mr *MockAlarmMediaRepositoryMockRecorder) GetMediaForAlarm(ctx, alarmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMediaForAlarm", reflect.TypeOf((*MockAlarmMediaRepository)(nil).GetMediaForAlarm), ctx, alarmId)
}

// LinkMediaWithAlarm mocks base method.
func (m *MockAlarmMediaRepository) LinkMediaWithAlarm(ctx *gin.Context, transaction transaction_manager.Transaction, alarmID, mediaID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkMediaWithAlarm", ctx, transaction, alarmID, mediaID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkMediaWithAlarm indicates an expected call of LinkMediaWithAlarm.
func (mr *MockAlarmMediaRepositoryMockRecorder) LinkMediaWithAlarm(ctx, transaction, alarmID, mediaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkMediaWithAlarm", reflect.TypeOf((*MockAlarmMediaRepository)(nil).LinkMediaWithAlarm), ctx, transaction, alarmID, mediaID)
}

// UploadMedia mocks base method.
func (m *MockAlarmMediaRepository) UploadMedia(ctx *gin.Context, transaction transaction_manager.Transaction, mediaId, senderId, mediaURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMedia", ctx, transaction, mediaId, senderId, mediaURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadMedia indicates an expected call of UploadMedia.
func (mr *MockAlarmMediaRepositoryMockRecorder) UploadMedia(ctx, transaction, mediaId, senderId, mediaURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMedia", reflect.TypeOf((*MockAlarmMediaRepository)(nil).UploadMedia), ctx, transaction, mediaId, senderId, mediaURL)
}
